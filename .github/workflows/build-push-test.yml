name: Build Image and Check for Tests

on:
  push:
    branches:
      - "**"
      - "!main"

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  IMAGE_NAME: woopick-backend

jobs:
  build-push-gcr:
    name: Build and push to GCR
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: Woo-Pick-Fullfillment-Inventory/Backend-Woo-Inventory
          token: ${{ secrets.WOOPICK_GITHUB_TOKEN }}

      - name: Authenticate to WIF
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SA_GH_ACTIONS }}
          token_format: access_token
          export_environment_variables: true

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./auto_update_tag.sh -v patch

      - name: Build and push Docker image
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |-
          gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet
          docker build --platform linux/amd64 -t europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:latest .
          docker build --platform linux/amd64 -t europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:$GIT_TAG .
          docker push europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:latest
          docker push europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:$GIT_TAG

  check-test:
    name: Execute Test Cases
    needs:
      - build-push-gcr
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to WIF
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SA_GH_ACTIONS }}
          token_format: access_token
          export_environment_variables: true
      
      - name: Install dependencies
        run: npm install
      
      - name: Install Firebase Emulator Suite
        run: npm install -g firebase-tools

      - name: Print environment variables
        run: echo "PROJECT_ID=${PROJECT_ID}, IMAGE_NAME=${IMAGE_NAME}"

      - name: Verify Dockerfile content
        run: cat Dockerfile

      - name: Replace Docker image
        run: |
          gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet
          sed -i "s|\$PROJECT_ID|${{ secrets.PROJECT_ID }}|g" docker-compose.github-pipeline.yml
          sed -i "s|\$IMAGE_NAME|$IMAGE_NAME|g" docker-compose.github-pipeline.yml

      - name: Start wiremock and application
        run: |-
          docker-compose -f docker-compose.github-pipeline.yml up -d

      - name: Run all the tests
        run: firebase emulators:exec --project=test-project --only firestore 'npm run test --exit'
      
      - name: Setup tmate session
        if: success() || failure()
        uses: mxschmitt/action-tmate@v3

      - name: Check Docker container logs
        if: always()
        run: docker-compose -f docker-compose.yml -f docker-compose.github-pipeline.yml logs

      - name: Stop containers
        if: always()
        run: docker-compose -f docker-compose.yml -f docker-compose.github-pipeline.yml down
