name: Build and deploy

on:
  push:
    branches:
      - '**'
      - '!main'

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  IMAGE_NAME: woopick-backend
  REGION: europe-west3
  DEPLOYMENT_NAME: woopick-backend

jobs:
  build-push-gcr:
    name: Build and push to GCR
    runs-on: ubuntu-latest

    permissions:
      id-token: write 
      contents: read  

    outputs:
      image-name: ${{ steps.output-image-name-and-tag.outputs.image-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: Woo-Pick-Fullfillment-Inventory/Backend-Woo-Inventory
          token: ${{ secrets.WOOPICK_GITHUB_TOKEN}}

      - name: Authenticate to WIF
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SA_GH_ACTIONS }}
          token_format: access_token
          export_environment_variables: true
    
      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./scripts/auto_update_tag.sh -v patch

      - name: Build and push Docker image
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |-
          gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet
          docker build -t europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:latest .
          docker build -t europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:$GIT_TAG .
          docker push europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:latest
          docker push europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:$GIT_TAG
      - id: output-image-name-and-tag
        name: Set image name output
        run: echo "image-name=europe-west3-docker.pkg.dev/$PROJECT_ID/woopick-registry/$IMAGE_NAME:latest" >> $GITHUB_ENV
  
  check-test:
    needs:
      - build-push-gcr
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Pull image from registry
        run: echo "The exported image-name is ${{ needs.build-push-gcr.outputs.image-name }}"
      - uses: actions/checkout@v3

      - name: Replace Docker image
        run: |
          sed -i 's#\$IMAGE_NAME#${{ needs.build-push-gcr.outputs.image-name }}#g' 'docker-compose.integration-test.yml'
          cat docker-compose.integration-test.yml

      - name: Start dependencies and application
        run: docker-compose -f docker-compose.yml -f docker-compose.integration-test.yml up -d

      - name: Execute integration tests
        run: npm run test

      - name: Stop containers
        if: always()
        run: docker-compose -f docker-compose.yml -f docker-compose.integration-test.yml down
          